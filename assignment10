import java.util.LinkedList;
import java.util.ListIterator;

public class HugeInt {
    private LinkedList<Integer> digits;
    private int sign;

    public HugeInt(String value) {
        this.digits = new LinkedList<>();
        this.sign = 1;

        if (value.charAt(0) == '-') {
            this.sign = 0; // Negative
            value = value.substring(1);
        }

        for (int i = 0; i < value.length(); i++) {
            int digit = Character.getNumericValue(value.charAt(i));
            digits.add(digit);
        }
    }

    private HugeInt(LinkedList<Integer> digits, int sign) {
        this.digits = digits;
        this.sign = sign;
    }

    public static HugeInt plus(HugeInt a, HugeInt b) {
        LinkedList<Integer> resultDigits = new LinkedList<>();
        int carry = 0;
        ListIterator<Integer> aIterator = a.digits.listIterator(a.digits.size());
        ListIterator<Integer> bIterator = b.digits.listIterator(b.digits.size());

        while (aIterator.hasPrevious() || bIterator.hasPrevious()) {
            int sum = carry;
            if (aIterator.hasPrevious()) {
                sum += aIterator.previous();
            }
            if (bIterator.hasPrevious()) {
                sum += bIterator.previous();
            }

            resultDigits.addFirst(sum % 10);
            carry = sum / 10;
        }

        if (carry > 0) {
            resultDigits.addFirst(carry);
        }

        return new HugeInt(resultDigits, a.sign);
    }

    public static HugeInt multiply(HugeInt a, HugeInt b) {
        HugeInt result = new HugeInt("0");
        ListIterator<Integer> bIterator = b.digits.listIterator(b.digits.size());

        while (bIterator.hasPrevious()) {
            int digit = bIterator.previous();
            HugeInt partialProduct = multiplyByDigit(a, digit);
            result = plus(result, partialProduct);
            a.digits.addLast(0); // Shift left for the next digit
        }

        result.sign = a.sign == b.sign ? 1 : 0; // Set the sign of the result

        return result;
    }

    private static HugeInt multiplyByDigit(HugeInt a, int digit) {
        LinkedList<Integer> resultDigits = new LinkedList<>();
        int carry = 0;
        ListIterator<Integer> aIterator = a.digits.listIterator(a.digits.size());

        while (aIterator.hasPrevious()) {
            int product = carry + aIterator.previous() * digit;
            resultDigits.addFirst(product % 10);
            carry = product / 10;
        }

        if (carry > 0) {
            resultDigits.addFirst(carry);
        }

        return new HugeInt(resultDigits, 1); // The sign is always positive in partial products
    }

    public int compareTo(HugeInt a) {
        if (this.sign > a.sign) {
            return 1;
        } else if (this.sign < a.sign) {
            return -1;
        } else {
            if (this.digits.size() > a.digits.size()) {
                return this.sign == 1 ? 1 : -1;
            } else if (this.digits.size() < a.digits.size()) {
                return this.sign == 1 ? -1 : 1;
            } else {
                ListIterator<Integer> aIterator = a.digits.listIterator();
                ListIterator<Integer> thisIterator = this.digits.listIterator();

                while (aIterator.hasNext()) {
                    int cmp = Integer.compare(thisIterator.next(), aIterator.next());
                    if (cmp != 0) {
                        return this.sign == 1 ? cmp : -cmp;
                    }
                }

                return 0;
            }
        }
    }

    public static void sort(LinkedList<HugeInt> list) {
        list.sort(HugeInt::compareTo);
    }

    @Override
    public String toString() {
        StringBuilder str = new StringBuilder();
        if (sign == 0) {
            str.append('-');
        }
        for (int digit : digits) {
            str.append(digit);
        }
        return str.toString();
    }

    public static void main(String[] args) {
        LinkedList<HugeInt> hugeIntList = new LinkedList<>();
        hugeIntList.add(new HugeInt("-12345"));
        hugeIntList.add(new HugeInt("54321"));
        hugeIntList.add(new HugeInt("0"));
        hugeIntList.add(new HugeInt("9876543210"));
        hugeIntList.add(new HugeInt("-9876543210"));

        System.out.println("Unsorted List:");
        for (HugeInt num : hugeIntList) {
            System.out.println(num);
        }

        HugeInt.sort(hugeIntList);

        System.out.println("\nSorted List:");
        for (HugeInt num : hugeIntList) {
            System.out.println(num);
        }
    }
}
